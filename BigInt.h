#ifndef BIGINT_H_
#define BIGINT_H_
#include <string>
#include <bitset>

namespace RSAUtil
{
	#define BIGINT_SIZE 96
	
	/*
	 * **********************************************************************************
	* Класс для представления 64-битных целых чисел. Это класс-оболочка для
	* std::bitset<BIGINT_SIZE> . Он предоставляет общие операторы для работы с
	* целые числа. 
	 * @class: BigInt
	 * @namespace: RSAUtil
	 * @file: BigInt.h
	 
	 * **********************************************************************************
	 */

class BigInt
{
private:
	// Битовое число BIGINT_SIZE, представленное этим классом.
	std::bitset<BIGINT_SIZE> n;	
	
	
public:
	/*
	 * *******************************************************************************
	 *Конструкторы. Инициализирует набор битов n с заданным параметром.
 * BigInt(): n инициализируется значением 0.
 * BigInt(int, int): первый int - это вторые 32 бита n.
 * Второй int - это младшие 32 бита n.
 * Используя этот метод, BigInt может быть инициализирован только в
 * целое число из 64 бит.
 * BigInt(int): заданный int является младшим порядком 32 бита n.
 * BigInt(std::bitset<BIGINT_SIZE>: n инициализируется для данного набора битов.
	 * *******************************************************************************
	 */
	BigInt();
	BigInt(int, int); 
	BigInt(int);
	BigInt(std::bitset<BIGINT_SIZE>);
	virtual ~BigInt();
	
	/*
	 * ******************************************************************************
	 * Перегруженные операторы для работы с 96-битными числами.
	 * ******************************************************************************
	 */
	 
	/*
	 * *****************************************************************************
	 * Перегруженный оператор сложения. Любое выполнение отбрасывается.
	* @параметр BigInt: второй операнд при вычислении дополнения.
	* @возвращает BigInt: результат добавления этого BigInt с заданным BigInt.
	 * *****************************************************************************
	 */
	BigInt operator+(BigInt);
	
	/*
	 * ******************************************************************************
	 * Перегруженный оператор умножения. Любое выполнение отбрасывается.
	 * @параметр BigInt: второй операнд при вычислении умножения.
	 * @возвращает BigInt: результат умножения этого BigInt на заданный BigInt.
	 * ******************************************************************************
	 */
	BigInt operator*(BigInt);
	
	/*
	 * ******************************************************************************
	* Перегруженный оператор умножения с присвоением. Любое выполнение отбрасывается.
	* @параметр BigInt: второй оператор в вычислении умножения.
	* @возвращает BigInt&: ссылку на этот BigInt после того, как он был умножен на
	* заданный BigInt.
	 * *******************************************************************************
	 */
	BigInt& operator*=(BigInt);
	
	/*
	 * *******************************************************************************
	 * Перегруженный оператор xor. Выполняет побитовое xor.
	 * @параметр BigInt: второй оператор в операции xor.
	 * @возвращает Bigint: результат преобразования этого BigInt в заданный BigInt.
	 * *******************************************************************************
	 */
	BigInt operator^(BigInt);
	
	/*
	 * ********************************************************************************
	 * Перегруженный оператор вычитания. Проверка на переполнение не выполняется.
	* Вычитание большего числа из меньшего числа приведет к двойке
	* дополняющее представление отрицательного числа. Однако BigInt не обрабатывает
	* отрицательные числа и всегда будет интерпретировать любой набор битов как положительное целое число.
	* @параметр BigInt: второй операнд в операции вычитания.
	* @возвращает BigInt: результат вычитания заданного BigInt из этого BigInt.
	 * ********************************************************************************
	 */
	BigInt operator-(BigInt);
	
	/*
	 * *********************************************************************************
	* Перегруженные операторы сравнения. Все сравнения являются неподписанными.
	* @параметр BigInt: второй операнд в сравнении.
	* @возвращает bool: результат сравнения
	* Это значение <оператор сравнения> заданное значение.
	 * ********************************************************************************
	 */
	bool operator>=(BigInt);
	bool operator>(BigInt);
	bool operator<=(BigInt);
	bool operator<(BigInt);
	
	/*
	 * ********************************************************************************
	* Перегруженный оператор деления.
	* @параметр BigInt: делитель в операции деления.
	 * @возвращает BigInt: частное, полученное в результате деления этого BigInt на
	 * задан BigInt.
	 * *******************************************************************************
	 */
	BigInt operator/(BigInt);
	
	/*
	 * ******************************************************************************
	 * Перегруженный оператор модуля.
	 * @параметр BigInt: делитель в операции деления.
	 * @возвращает BigInt: остаток, полученный в результате деления этого BigInt на
	* задан BigInt.
	 * *****************************************************************************
	 */
	BigInt operator%(BigInt);
	
	/*
	 * ******************************************************************************
	 * Перегруженный логический оператор сдвига вправо с присвоением.
	* @параметр int: величина сдвига.
	 * @возвращает BigInt&: ссылку на этот BigInt после выполнения сдвига.
	 * ******************************************************************************
	 */
	BigInt& operator>>=(int);
	
	/*
	 * ******************************************************************************
		* Перегруженный оператор логического сдвига влево с присваиванием.
	 * @параметр int: величина сдвига.
	* @возвращает BigInt&: ссылку на этот BigInt после выполнения сдвига.
	 * ******************************************************************************
	 */
	BigInt& operator<<=(int);
	
	/*
	 * *******************************************************************************
	 * Перегружен по битам ИЛИ с назначением.
		 * @параметр BigInt: второй операнд в операции ИЛИ.
	 * @возвращает BigInt&: ссылка на этот BigInt после побитового ИЛИ
	* готово.
	 * *******************************************************************************
	 */
	BigInt& operator|=(BigInt);
	
	/*
	 * *******************************************************************************
	 * Перегружен по битам И с назначением.
	 * @параметр BigInt: второй операнд в операции AND.
	* @возвращает BigInt&: ссылку на этот BigInt после побитового и был
	 * готово.
	 * ********************************************************************************
	 */
	BigInt& operator&=(BigInt);
	
	/*
	 * ********************************************************************************
		*Перегруженный оператор equals.
		* @параметр BigInt: операнд, с которым нужно сравнить этот BigInt.
	 * @возвращает значение bool: True, если два BIGINT имеют одинаковое значение.
	 * ********************************************************************************
	 */
	bool operator==(BigInt);
	
	/*
	 * *********************************************************************************
	* Перегруженный оператор индексации.
	* @parameter int: индекс базового набора битов, который нужно получить.
	* @возвращает int: бит (в виде целого числа, 1 или 0) базового набора битов в
	 * указанный индекс.
	 * *********************************************************************************
	 */
	int operator[](int) const;
	
	/*
	 * *********************************************************************************
	 * переверните. Переворачивает каждый бит в базовом наборе битов.
	* @возвращает BigInt&: ссылку на этот BigInt после того, как каждый бит был перевернут.
	 * *********************************************************************************
	 */
	BigInt& flip();
	
	/*
	 * *********************************************************************************
	 * Получить. Возвращает базовый набор битов этого BigInt.
	* @возвращает std::bitset<BIGINT_SIZE>: набор битов этого BigInt.
	 * *********************************************************************************
	 */
	std::bitset<BIGINT_SIZE> getN() const;
	
	/*
	 * *********************************************************************************
	  * опыт. Выполняет быстрое возведение в степень. Этот BigInt ^ задан BigInt.
	* @параметр BigInt: показатель степени.
	* @возвращает BigInt: результат возведения этого BigInt в степень заданного
	* BigInt.
	 * *********************************************************************************
	 */
	BigInt exp(BigInt);
	
	/*
	 * *********************************************************************************
	* опыт. Выполняет быстрое возведение в степень. Этот BigInt ^ задан int.
	* @параметр int: показатель степени.
		* @возвращает BigInt: результат возведения этого BigInt в степень заданного
	 * BigInt.
	 * *********************************************************************************
	 */
	BigInt exp(int);
	
	/*
	 * ********************************************************************************
	* Равно нулю. Проверяет, содержит ли этот BigInt все нулевые биты.
	* @возвращает bool: True, если ни один из битов BigInt не установлен, false в противном случае.
	 * *********************************************************************************
	 */
	bool isZero();
	
	/*
	 * *********************************************************************************
	  * toString. Возвращает двоичное представление BigInt в виде строки.
		* @возвращает std::string: Двоичное представление этого BigInt.
	 * *********************************************************************************
	 */
	std::string toString() const;		
	
	/*
	 * *********************************************************************************
	 * toHexString(). Возвращает шестнадцатеричное представление BigInt в виде строки.
	* @возвращает std::string: шестнадцатеричное представление этого BigInt.
	 * *********************************************************************************
	 */
	std::string toHexString() const;	
	
	/*
	 * *********************************************************************************
	* Тулонг. Преобразуйте BigInt в массив длинных значений без знака.
	* @параметр unsigned long*: указатель на массив беззнаковых длин. Этот массив
	* будет заполнен BigInt. Младшие 32 бита 
	* этот BigInt будет находиться в индексе 0 массива.
	* @параметр int: размер массива.
	 * *********************************************************************************
	 */
	void toULong(unsigned long*, int) const;				



	
};
	
	/*
	 * *********************************************************************************
	* modPow. Выполняет модульное возведение в степень. Если три параметра равны a, b, m
	* (в таком порядке) затем эта функция возвращает [a^b] mod m.
	* @параметр BigInt: первый операнд.
	 * @параметр BigInt: показатель степени.
	* @параметр BigInt: модуль упругости.
	 * @возвращает BigInt: результат выполнения [a^b] mod m.
	 * *********************************************************************************
	 */
	BigInt modPow(BigInt, BigInt, BigInt);
	
	/*
	 * *********************************************************************************
	  * binToHex. Преобразует строку, представляющую число в двоичном формате, в строку
	* представление этого числа в шестнадцатеричном формате.
	* @параметр std::string: двоичное представление числа.
		Встроенная панель инструментов действий с файлами
	 * *********************************************************************************/
	std::string binToHex(std::string);
	
	/*
	 * **********************************************************************************
	Копирование строк  
 * выполнено, и любое переполнение будет потеряно.
  Копировать постоянную ссылку  
Просмотр git blame
 * @возвращает std::bitset<BIGINT_SIZE>: результат побитового сложения..
	 * **********************************************************************************/
	std::bitset<BIGINT_SIZE> add(std::bitset<BIGINT_SIZE>, std::bitset<BIGINT_SIZE>);
	
	/*
	 * *********************************************************************************
	* вычесть. Выполняет побитовое вычитание для двух битовых наборов. Проверка не выполняется 
 * сделано для обеспечения того, чтобы первый операнд был больше второго. Если это не так
 * результатом будет отрицательное число в дополнении к двум.
 * @параметр std::набор битов<BIGINT_SIZE>: первый операнд (op1).
 * @параметр std::набор битов<BIGINT_SIZE>: второй операнд (op2).
 * @возвращает std::bitset<BIGINT_SIZE>: результат выполнения op1 - op2.
	 * **********************************************************************************
	 */
	std::bitset<BIGINT_SIZE> subtract(std::bitset<BIGINT_SIZE>, std::bitset<BIGINT_SIZE>);
	


}

#endif /*BIGINT_H_*/
